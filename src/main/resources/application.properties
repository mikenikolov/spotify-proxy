#-----------------App properties---------------------#
# Database credentials (can be changed as needed)
spring.datasource.url = jdbc:h2:mem:spotify-proxy
spring.datasource.username = user
spring.datasource.password = password

# Setting for real database (by default we are using in-memory H2 database)
# validate (validate the schema)
# update (update the schema if are changes)
# create (create the schema)
# create-drop (create the schema and drop it at the end)
spring.jpa.properties.hibernate.hbm2ddl.auto = update
spring.jpa.open-in-view = false

# Show SQL queries in console during runtime (for debug/develop)
# true - show | false - hide
spring.jpa.show-sql = false
spring.jpa.properties.hibernate.format_sql = false

##      Presentation settings       ##
# Number of top tracks of the artist (max limit - 10)
artist.top.tracks.limit = 3

# Number of cached artists per page
pageable.size = 3

#---------------Spotify properties--------------------#
##      Security        ##
spotify.security.registration.id = spotify

# Use environment variables or just set this right here
# Easy example without environment variables: spotify.security.client.id = 3ojn432kk4k0h8tj3
spotify.security.client.id = ${SPOTIFY.CLIENT.ID}
spotify.security.client.secret = ${SPOTIFY.CLIENT.SECRET}

spotify.security.token.uri = https://accounts.spotify.com/api/token
spotify.security.authorization.uri = https://accounts.spotify.com/authorize

# The domain name may be different, depending on the server/machine on which the project runs
# Below is the default "Redirect URI" that you can use to test the application on your local machine
spotify.security.redirect.uri = http://localhost:8080/login/oauth2/code/spotify

##      Spotify API endpoints       ##
spotify.api.artist.id = https://api.spotify.com/v1/artists/%s
spotify.api.artist.name = https://api.spotify.com/v1/search?type=artist&q=artist:%s
spotify.api.artist.top.tracks = https://api.spotify.com/v1/artists/%s/top-tracks?market=UA
